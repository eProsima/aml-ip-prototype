// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file DLOutput.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _DLOUTPUT_H_
#define _DLOUTPUT_H_


#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(DLOutput_SOURCE)
#define DLOutput_DllAPI __declspec( dllexport )
#else
#define DLOutput_DllAPI __declspec( dllimport )
#endif // DLOutput_SOURCE
#else
#define DLOutput_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define DLOutput_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


/*!
 * @brief This class represents the structure AML_IP_Relation defined by the user in the IDL file.
 * @ingroup DLOUTPUT
 */
class AML_IP_Relation
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport AML_IP_Relation();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~AML_IP_Relation();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object AML_IP_Relation that will be copied.
     */
    eProsima_user_DllExport AML_IP_Relation(
            const AML_IP_Relation& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object AML_IP_Relation that will be copied.
     */
    eProsima_user_DllExport AML_IP_Relation(
            AML_IP_Relation&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object AML_IP_Relation that will be copied.
     */
    eProsima_user_DllExport AML_IP_Relation& operator =(
            const AML_IP_Relation& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object AML_IP_Relation that will be copied.
     */
    eProsima_user_DllExport AML_IP_Relation& operator =(
            AML_IP_Relation&& x);

    /*!
     * @brief This function sets a value in member typeOfRelation
     * @param _typeOfRelation New value for member typeOfRelation
     */
    eProsima_user_DllExport void typeOfRelation(
            bool _typeOfRelation);

    /*!
     * @brief This function returns the value of member typeOfRelation
     * @return Value of member typeOfRelation
     */
    eProsima_user_DllExport bool typeOfRelation() const;

    /*!
     * @brief This function returns a reference to member typeOfRelation
     * @return Reference to member typeOfRelation
     */
    eProsima_user_DllExport bool& typeOfRelation();

    /*!
     * @brief This function copies the value in member l
     * @param _l New value to be copied in member l
     */
    eProsima_user_DllExport void l(
            const std::vector<uint32_t>& _l);

    /*!
     * @brief This function moves the value in member l
     * @param _l New value to be moved in member l
     */
    eProsima_user_DllExport void l(
            std::vector<uint32_t>&& _l);

    /*!
     * @brief This function returns a constant reference to member l
     * @return Constant reference to member l
     */
    eProsima_user_DllExport const std::vector<uint32_t>& l() const;

    /*!
     * @brief This function returns a reference to member l
     * @return Reference to member l
     */
    eProsima_user_DllExport std::vector<uint32_t>& l();
    /*!
     * @brief This function copies the value in member h
     * @param _h New value to be copied in member h
     */
    eProsima_user_DllExport void h(
            const std::vector<uint32_t>& _h);

    /*!
     * @brief This function moves the value in member h
     * @param _h New value to be moved in member h
     */
    eProsima_user_DllExport void h(
            std::vector<uint32_t>&& _h);

    /*!
     * @brief This function returns a constant reference to member h
     * @return Constant reference to member h
     */
    eProsima_user_DllExport const std::vector<uint32_t>& h() const;

    /*!
     * @brief This function returns a reference to member h
     * @return Reference to member h
     */
    eProsima_user_DllExport std::vector<uint32_t>& h();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const AML_IP_Relation& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    bool m_typeOfRelation;
    std::vector<uint32_t> m_l;
    std::vector<uint32_t> m_h;
};
/*!
 * @brief This class represents the structure AML_IP_DLOutput defined by the user in the IDL file.
 * @ingroup DLOUTPUT
 */
class AML_IP_DLOutput
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport AML_IP_DLOutput();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~AML_IP_DLOutput();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object AML_IP_DLOutput that will be copied.
     */
    eProsima_user_DllExport AML_IP_DLOutput(
            const AML_IP_DLOutput& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object AML_IP_DLOutput that will be copied.
     */
    eProsima_user_DllExport AML_IP_DLOutput(
            AML_IP_DLOutput&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object AML_IP_DLOutput that will be copied.
     */
    eProsima_user_DllExport AML_IP_DLOutput& operator =(
            const AML_IP_DLOutput& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object AML_IP_DLOutput that will be copied.
     */
    eProsima_user_DllExport AML_IP_DLOutput& operator =(
            AML_IP_DLOutput&& x);

    /*!
     * @brief This function copies the value in member relations
     * @param _relations New value to be copied in member relations
     */
    eProsima_user_DllExport void relations(
            const std::vector<AML_IP_Relation>& _relations);

    /*!
     * @brief This function moves the value in member relations
     * @param _relations New value to be moved in member relations
     */
    eProsima_user_DllExport void relations(
            std::vector<AML_IP_Relation>&& _relations);

    /*!
     * @brief This function returns a constant reference to member relations
     * @return Constant reference to member relations
     */
    eProsima_user_DllExport const std::vector<AML_IP_Relation>& relations() const;

    /*!
     * @brief This function returns a reference to member relations
     * @return Reference to member relations
     */
    eProsima_user_DllExport std::vector<AML_IP_Relation>& relations();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const AML_IP_DLOutput& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    std::vector<AML_IP_Relation> m_relations;
};

#endif // _DLOUTPUT_H_