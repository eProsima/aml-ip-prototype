// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file DLOutput.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "DLOutput.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

AML_IP_Relation::AML_IP_Relation()
{
    // m_typeOfRelation com.eprosima.idl.parser.typecode.PrimitiveTypeCode@954b04f
    m_typeOfRelation = false;
    // m_l com.eprosima.idl.parser.typecode.SequenceTypeCode@149494d8

    // m_h com.eprosima.idl.parser.typecode.SequenceTypeCode@710726a3


}

AML_IP_Relation::~AML_IP_Relation()
{



}

AML_IP_Relation::AML_IP_Relation(
        const AML_IP_Relation& x)
{
    m_typeOfRelation = x.m_typeOfRelation;
    m_l = x.m_l;
    m_h = x.m_h;
}

AML_IP_Relation::AML_IP_Relation(
        AML_IP_Relation&& x)
{
    m_typeOfRelation = x.m_typeOfRelation;
    m_l = std::move(x.m_l);
    m_h = std::move(x.m_h);
}

AML_IP_Relation& AML_IP_Relation::operator =(
        const AML_IP_Relation& x)
{

    m_typeOfRelation = x.m_typeOfRelation;
    m_l = x.m_l;
    m_h = x.m_h;

    return *this;
}

AML_IP_Relation& AML_IP_Relation::operator =(
        AML_IP_Relation&& x)
{

    m_typeOfRelation = x.m_typeOfRelation;
    m_l = std::move(x.m_l);
    m_h = std::move(x.m_h);

    return *this;
}

size_t AML_IP_Relation::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);




    return current_alignment - initial_alignment;
}

size_t AML_IP_Relation::getCdrSerializedSize(
        const AML_IP_Relation& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.l().size() > 0)
    {
        current_alignment += (data.l().size() * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }



    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.h().size() > 0)
    {
        current_alignment += (data.h().size() * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }




    return current_alignment - initial_alignment;
}

void AML_IP_Relation::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_typeOfRelation;
    scdr << m_l;
    scdr << m_h;

}

void AML_IP_Relation::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_typeOfRelation;
    dcdr >> m_l;
    dcdr >> m_h;
}

/*!
 * @brief This function sets a value in member typeOfRelation
 * @param _typeOfRelation New value for member typeOfRelation
 */
void AML_IP_Relation::typeOfRelation(
        bool _typeOfRelation)
{
    m_typeOfRelation = _typeOfRelation;
}

/*!
 * @brief This function returns the value of member typeOfRelation
 * @return Value of member typeOfRelation
 */
bool AML_IP_Relation::typeOfRelation() const
{
    return m_typeOfRelation;
}

/*!
 * @brief This function returns a reference to member typeOfRelation
 * @return Reference to member typeOfRelation
 */
bool& AML_IP_Relation::typeOfRelation()
{
    return m_typeOfRelation;
}

/*!
 * @brief This function copies the value in member l
 * @param _l New value to be copied in member l
 */
void AML_IP_Relation::l(
        const std::vector<uint32_t>& _l)
{
    m_l = _l;
}

/*!
 * @brief This function moves the value in member l
 * @param _l New value to be moved in member l
 */
void AML_IP_Relation::l(
        std::vector<uint32_t>&& _l)
{
    m_l = std::move(_l);
}

/*!
 * @brief This function returns a constant reference to member l
 * @return Constant reference to member l
 */
const std::vector<uint32_t>& AML_IP_Relation::l() const
{
    return m_l;
}

/*!
 * @brief This function returns a reference to member l
 * @return Reference to member l
 */
std::vector<uint32_t>& AML_IP_Relation::l()
{
    return m_l;
}
/*!
 * @brief This function copies the value in member h
 * @param _h New value to be copied in member h
 */
void AML_IP_Relation::h(
        const std::vector<uint32_t>& _h)
{
    m_h = _h;
}

/*!
 * @brief This function moves the value in member h
 * @param _h New value to be moved in member h
 */
void AML_IP_Relation::h(
        std::vector<uint32_t>&& _h)
{
    m_h = std::move(_h);
}

/*!
 * @brief This function returns a constant reference to member h
 * @return Constant reference to member h
 */
const std::vector<uint32_t>& AML_IP_Relation::h() const
{
    return m_h;
}

/*!
 * @brief This function returns a reference to member h
 * @return Reference to member h
 */
std::vector<uint32_t>& AML_IP_Relation::h()
{
    return m_h;
}

size_t AML_IP_Relation::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;






    return current_align;
}

bool AML_IP_Relation::isKeyDefined()
{
    return false;
}

void AML_IP_Relation::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
       
}

AML_IP_DLOutput::AML_IP_DLOutput()
{
    // m_relations com.eprosima.idl.parser.typecode.SequenceTypeCode@6a396c1e


}

AML_IP_DLOutput::~AML_IP_DLOutput()
{
}

AML_IP_DLOutput::AML_IP_DLOutput(
        const AML_IP_DLOutput& x)
{
    m_relations = x.m_relations;
}

AML_IP_DLOutput::AML_IP_DLOutput(
        AML_IP_DLOutput&& x)
{
    m_relations = std::move(x.m_relations);
}

AML_IP_DLOutput& AML_IP_DLOutput::operator =(
        const AML_IP_DLOutput& x)
{

    m_relations = x.m_relations;

    return *this;
}

AML_IP_DLOutput& AML_IP_DLOutput::operator =(
        AML_IP_DLOutput&& x)
{

    m_relations = std::move(x.m_relations);

    return *this;
}

size_t AML_IP_DLOutput::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < 100; ++a)
    {
        current_alignment += AML_IP_Relation::getMaxCdrSerializedSize(current_alignment);}

    return current_alignment - initial_alignment;
}

size_t AML_IP_DLOutput::getCdrSerializedSize(
        const AML_IP_DLOutput& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.relations().size(); ++a)
    {
        current_alignment += AML_IP_Relation::getCdrSerializedSize(data.relations().at(a), current_alignment);}

    return current_alignment - initial_alignment;
}

void AML_IP_DLOutput::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_relations;
}

void AML_IP_DLOutput::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_relations;}

/*!
 * @brief This function copies the value in member relations
 * @param _relations New value to be copied in member relations
 */
void AML_IP_DLOutput::relations(
        const std::vector<AML_IP_Relation>& _relations)
{
    m_relations = _relations;
}

/*!
 * @brief This function moves the value in member relations
 * @param _relations New value to be moved in member relations
 */
void AML_IP_DLOutput::relations(
        std::vector<AML_IP_Relation>&& _relations)
{
    m_relations = std::move(_relations);
}

/*!
 * @brief This function returns a constant reference to member relations
 * @return Constant reference to member relations
 */
const std::vector<AML_IP_Relation>& AML_IP_DLOutput::relations() const
{
    return m_relations;
}

/*!
 * @brief This function returns a reference to member relations
 * @return Reference to member relations
 */
std::vector<AML_IP_Relation>& AML_IP_DLOutput::relations()
{
    return m_relations;
}

size_t AML_IP_DLOutput::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool AML_IP_DLOutput::isKeyDefined()
{
    return false;
}

void AML_IP_DLOutput::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
     
}
