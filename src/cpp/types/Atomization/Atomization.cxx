// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Atomization.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "Atomization.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

AML_IP_Atom::AML_IP_Atom()
{
    // m_ucs com.eprosima.idl.parser.typecode.SequenceTypeCode@47db50c5


}

AML_IP_Atom::~AML_IP_Atom()
{
}

AML_IP_Atom::AML_IP_Atom(
        const AML_IP_Atom& x)
{
    m_ucs = x.m_ucs;
}

AML_IP_Atom::AML_IP_Atom(
        AML_IP_Atom&& x)
{
    m_ucs = std::move(x.m_ucs);
}

AML_IP_Atom& AML_IP_Atom::operator =(
        const AML_IP_Atom& x)
{

    m_ucs = x.m_ucs;

    return *this;
}

AML_IP_Atom& AML_IP_Atom::operator =(
        AML_IP_Atom&& x)
{

    m_ucs = std::move(x.m_ucs);

    return *this;
}

size_t AML_IP_Atom::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t AML_IP_Atom::getCdrSerializedSize(
        const AML_IP_Atom& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.ucs().size() > 0)
    {
        current_alignment += (data.ucs().size() * 4) + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    }



    return current_alignment - initial_alignment;
}

void AML_IP_Atom::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_ucs;
}

void AML_IP_Atom::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_ucs;}

/*!
 * @brief This function copies the value in member ucs
 * @param _ucs New value to be copied in member ucs
 */
void AML_IP_Atom::ucs(
        const std::vector<uint32_t>& _ucs)
{
    m_ucs = _ucs;
}

/*!
 * @brief This function moves the value in member ucs
 * @param _ucs New value to be moved in member ucs
 */
void AML_IP_Atom::ucs(
        std::vector<uint32_t>&& _ucs)
{
    m_ucs = std::move(_ucs);
}

/*!
 * @brief This function returns a constant reference to member ucs
 * @return Constant reference to member ucs
 */
const std::vector<uint32_t>& AML_IP_Atom::ucs() const
{
    return m_ucs;
}

/*!
 * @brief This function returns a reference to member ucs
 * @return Reference to member ucs
 */
std::vector<uint32_t>& AML_IP_Atom::ucs()
{
    return m_ucs;
}

size_t AML_IP_Atom::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool AML_IP_Atom::isKeyDefined()
{
    return false;
}

void AML_IP_Atom::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
     
}

AML_IP_Atomization::AML_IP_Atomization()
{
    // m_atoms com.eprosima.idl.parser.typecode.SequenceTypeCode@3444d69d


}

AML_IP_Atomization::~AML_IP_Atomization()
{
}

AML_IP_Atomization::AML_IP_Atomization(
        const AML_IP_Atomization& x)
{
    m_atoms = x.m_atoms;
}

AML_IP_Atomization::AML_IP_Atomization(
        AML_IP_Atomization&& x)
{
    m_atoms = std::move(x.m_atoms);
}

AML_IP_Atomization& AML_IP_Atomization::operator =(
        const AML_IP_Atomization& x)
{

    m_atoms = x.m_atoms;

    return *this;
}

AML_IP_Atomization& AML_IP_Atomization::operator =(
        AML_IP_Atomization&& x)
{

    m_atoms = std::move(x.m_atoms);

    return *this;
}

size_t AML_IP_Atomization::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < 100; ++a)
    {
        current_alignment += AML_IP_Atom::getMaxCdrSerializedSize(current_alignment);}

    return current_alignment - initial_alignment;
}

size_t AML_IP_Atomization::getCdrSerializedSize(
        const AML_IP_Atomization& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.atoms().size(); ++a)
    {
        current_alignment += AML_IP_Atom::getCdrSerializedSize(data.atoms().at(a), current_alignment);}

    return current_alignment - initial_alignment;
}

void AML_IP_Atomization::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_atoms;
}

void AML_IP_Atomization::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_atoms;}

/*!
 * @brief This function copies the value in member atoms
 * @param _atoms New value to be copied in member atoms
 */
void AML_IP_Atomization::atoms(
        const std::vector<AML_IP_Atom>& _atoms)
{
    m_atoms = _atoms;
}

/*!
 * @brief This function moves the value in member atoms
 * @param _atoms New value to be moved in member atoms
 */
void AML_IP_Atomization::atoms(
        std::vector<AML_IP_Atom>&& _atoms)
{
    m_atoms = std::move(_atoms);
}

/*!
 * @brief This function returns a constant reference to member atoms
 * @return Constant reference to member atoms
 */
const std::vector<AML_IP_Atom>& AML_IP_Atomization::atoms() const
{
    return m_atoms;
}

/*!
 * @brief This function returns a reference to member atoms
 * @return Reference to member atoms
 */
std::vector<AML_IP_Atom>& AML_IP_Atomization::atoms()
{
    return m_atoms;
}

size_t AML_IP_Atomization::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool AML_IP_Atomization::isKeyDefined()
{
    return false;
}

void AML_IP_Atomization::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
     
}
