// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file multiservice.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_MULTISERVICE_H_
#define _FAST_DDS_GENERATED_MULTISERVICE_H_

#include "status.h"

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(multiservice_SOURCE)
#define multiservice_DllAPI __declspec( dllexport )
#else
#define multiservice_DllAPI __declspec( dllimport )
#endif // multiservice_SOURCE
#else
#define multiservice_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define multiservice_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


/*!
 * @brief This class represents the structure Multiservice_RequestAvailability defined by the user in the IDL file.
 * @ingroup MULTISERVICE
 */
class Multiservice_RequestAvailability
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Multiservice_RequestAvailability();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Multiservice_RequestAvailability();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Multiservice_RequestAvailability that will be copied.
     */
    eProsima_user_DllExport Multiservice_RequestAvailability(
            const Multiservice_RequestAvailability& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Multiservice_RequestAvailability that will be copied.
     */
    eProsima_user_DllExport Multiservice_RequestAvailability(
            Multiservice_RequestAvailability&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Multiservice_RequestAvailability that will be copied.
     */
    eProsima_user_DllExport Multiservice_RequestAvailability& operator =(
            const Multiservice_RequestAvailability& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Multiservice_RequestAvailability that will be copied.
     */
    eProsima_user_DllExport Multiservice_RequestAvailability& operator =(
            Multiservice_RequestAvailability&& x);

    /*!
     * @brief Comparison operator.
     * @param x Multiservice_RequestAvailability object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Multiservice_RequestAvailability& x) const;

    /*!
     * @brief Comparison operator.
     * @param x Multiservice_RequestAvailability object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Multiservice_RequestAvailability& x) const;

    /*!
     * @brief This function copies the value in member requester_id
     * @param _requester_id New value to be copied in member requester_id
     */
    eProsima_user_DllExport void requester_id(
            const std::string& _requester_id);

    /*!
     * @brief This function moves the value in member requester_id
     * @param _requester_id New value to be moved in member requester_id
     */
    eProsima_user_DllExport void requester_id(
            std::string&& _requester_id);

    /*!
     * @brief This function returns a constant reference to member requester_id
     * @return Constant reference to member requester_id
     */
    eProsima_user_DllExport const std::string& requester_id() const;

    /*!
     * @brief This function returns a reference to member requester_id
     * @return Reference to member requester_id
     */
    eProsima_user_DllExport std::string& requester_id();
    /*!
     * @brief This function sets a value in member task_id
     * @param _task_id New value for member task_id
     */
    eProsima_user_DllExport void task_id(
            uint32_t _task_id);

    /*!
     * @brief This function returns the value of member task_id
     * @return Value of member task_id
     */
    eProsima_user_DllExport uint32_t task_id() const;

    /*!
     * @brief This function returns a reference to member task_id
     * @return Reference to member task_id
     */
    eProsima_user_DllExport uint32_t& task_id();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const Multiservice_RequestAvailability& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    std::string m_requester_id;
    uint32_t m_task_id;
};
/*!
 * @brief This class represents the structure Multiservice_TaskReference defined by the user in the IDL file.
 * @ingroup MULTISERVICE
 */
class Multiservice_TaskReference
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Multiservice_TaskReference();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Multiservice_TaskReference();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Multiservice_TaskReference that will be copied.
     */
    eProsima_user_DllExport Multiservice_TaskReference(
            const Multiservice_TaskReference& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Multiservice_TaskReference that will be copied.
     */
    eProsima_user_DllExport Multiservice_TaskReference(
            Multiservice_TaskReference&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Multiservice_TaskReference that will be copied.
     */
    eProsima_user_DllExport Multiservice_TaskReference& operator =(
            const Multiservice_TaskReference& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Multiservice_TaskReference that will be copied.
     */
    eProsima_user_DllExport Multiservice_TaskReference& operator =(
            Multiservice_TaskReference&& x);

    /*!
     * @brief Comparison operator.
     * @param x Multiservice_TaskReference object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Multiservice_TaskReference& x) const;

    /*!
     * @brief Comparison operator.
     * @param x Multiservice_TaskReference object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Multiservice_TaskReference& x) const;

    /*!
     * @brief This function copies the value in member requester_id
     * @param _requester_id New value to be copied in member requester_id
     */
    eProsima_user_DllExport void requester_id(
            const std::string& _requester_id);

    /*!
     * @brief This function moves the value in member requester_id
     * @param _requester_id New value to be moved in member requester_id
     */
    eProsima_user_DllExport void requester_id(
            std::string&& _requester_id);

    /*!
     * @brief This function returns a constant reference to member requester_id
     * @return Constant reference to member requester_id
     */
    eProsima_user_DllExport const std::string& requester_id() const;

    /*!
     * @brief This function returns a reference to member requester_id
     * @return Reference to member requester_id
     */
    eProsima_user_DllExport std::string& requester_id();
    /*!
     * @brief This function sets a value in member task_id
     * @param _task_id New value for member task_id
     */
    eProsima_user_DllExport void task_id(
            uint32_t _task_id);

    /*!
     * @brief This function returns the value of member task_id
     * @return Value of member task_id
     */
    eProsima_user_DllExport uint32_t task_id() const;

    /*!
     * @brief This function returns a reference to member task_id
     * @return Reference to member task_id
     */
    eProsima_user_DllExport uint32_t& task_id();

    /*!
     * @brief This function copies the value in member server_id
     * @param _server_id New value to be copied in member server_id
     */
    eProsima_user_DllExport void server_id(
            const std::string& _server_id);

    /*!
     * @brief This function moves the value in member server_id
     * @param _server_id New value to be moved in member server_id
     */
    eProsima_user_DllExport void server_id(
            std::string&& _server_id);

    /*!
     * @brief This function returns a constant reference to member server_id
     * @return Constant reference to member server_id
     */
    eProsima_user_DllExport const std::string& server_id() const;

    /*!
     * @brief This function returns a reference to member server_id
     * @return Reference to member server_id
     */
    eProsima_user_DllExport std::string& server_id();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const Multiservice_TaskReference& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    std::string m_requester_id;
    uint32_t m_task_id;
    std::string m_server_id;
};
/*!
 * @brief This class represents the structure Multiservice_Task_Data defined by the user in the IDL file.
 * @ingroup MULTISERVICE
 */
class Multiservice_Task_Data
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Multiservice_Task_Data();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Multiservice_Task_Data();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Multiservice_Task_Data that will be copied.
     */
    eProsima_user_DllExport Multiservice_Task_Data(
            const Multiservice_Task_Data& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Multiservice_Task_Data that will be copied.
     */
    eProsima_user_DllExport Multiservice_Task_Data(
            Multiservice_Task_Data&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Multiservice_Task_Data that will be copied.
     */
    eProsima_user_DllExport Multiservice_Task_Data& operator =(
            const Multiservice_Task_Data& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Multiservice_Task_Data that will be copied.
     */
    eProsima_user_DllExport Multiservice_Task_Data& operator =(
            Multiservice_Task_Data&& x);

    /*!
     * @brief Comparison operator.
     * @param x Multiservice_Task_Data object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Multiservice_Task_Data& x) const;

    /*!
     * @brief Comparison operator.
     * @param x Multiservice_Task_Data object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Multiservice_Task_Data& x) const;

    /*!
     * @brief This function sets a value in member _useless
     * @param __useless New value for member _useless
     */
    eProsima_user_DllExport void _useless(
            uint8_t __useless);

    /*!
     * @brief This function returns the value of member _useless
     * @return Value of member _useless
     */
    eProsima_user_DllExport uint8_t _useless() const;

    /*!
     * @brief This function returns a reference to member _useless
     * @return Reference to member _useless
     */
    eProsima_user_DllExport uint8_t& _useless();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const Multiservice_Task_Data& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    uint8_t m__useless;
};
/*!
 * @brief This class represents the structure Multiservice_Task defined by the user in the IDL file.
 * @ingroup MULTISERVICE
 */
class Multiservice_Task
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Multiservice_Task();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Multiservice_Task();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Multiservice_Task that will be copied.
     */
    eProsima_user_DllExport Multiservice_Task(
            const Multiservice_Task& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Multiservice_Task that will be copied.
     */
    eProsima_user_DllExport Multiservice_Task(
            Multiservice_Task&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Multiservice_Task that will be copied.
     */
    eProsima_user_DllExport Multiservice_Task& operator =(
            const Multiservice_Task& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Multiservice_Task that will be copied.
     */
    eProsima_user_DllExport Multiservice_Task& operator =(
            Multiservice_Task&& x);

    /*!
     * @brief Comparison operator.
     * @param x Multiservice_Task object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Multiservice_Task& x) const;

    /*!
     * @brief Comparison operator.
     * @param x Multiservice_Task object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Multiservice_Task& x) const;

    /*!
     * @brief This function copies the value in member task_reference
     * @param _task_reference New value to be copied in member task_reference
     */
    eProsima_user_DllExport void task_reference(
            const Multiservice_TaskReference& _task_reference);

    /*!
     * @brief This function moves the value in member task_reference
     * @param _task_reference New value to be moved in member task_reference
     */
    eProsima_user_DllExport void task_reference(
            Multiservice_TaskReference&& _task_reference);

    /*!
     * @brief This function returns a constant reference to member task_reference
     * @return Constant reference to member task_reference
     */
    eProsima_user_DllExport const Multiservice_TaskReference& task_reference() const;

    /*!
     * @brief This function returns a reference to member task_reference
     * @return Reference to member task_reference
     */
    eProsima_user_DllExport Multiservice_TaskReference& task_reference();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const Multiservice_Task& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    Multiservice_TaskReference m_task_reference;
};
/*!
 * @brief This class represents the structure Multiservice_Solution_Data defined by the user in the IDL file.
 * @ingroup MULTISERVICE
 */
class Multiservice_Solution_Data
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Multiservice_Solution_Data();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Multiservice_Solution_Data();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Multiservice_Solution_Data that will be copied.
     */
    eProsima_user_DllExport Multiservice_Solution_Data(
            const Multiservice_Solution_Data& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Multiservice_Solution_Data that will be copied.
     */
    eProsima_user_DllExport Multiservice_Solution_Data(
            Multiservice_Solution_Data&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Multiservice_Solution_Data that will be copied.
     */
    eProsima_user_DllExport Multiservice_Solution_Data& operator =(
            const Multiservice_Solution_Data& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Multiservice_Solution_Data that will be copied.
     */
    eProsima_user_DllExport Multiservice_Solution_Data& operator =(
            Multiservice_Solution_Data&& x);

    /*!
     * @brief Comparison operator.
     * @param x Multiservice_Solution_Data object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Multiservice_Solution_Data& x) const;

    /*!
     * @brief Comparison operator.
     * @param x Multiservice_Solution_Data object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Multiservice_Solution_Data& x) const;

    /*!
     * @brief This function sets a value in member _useless
     * @param __useless New value for member _useless
     */
    eProsima_user_DllExport void _useless(
            uint8_t __useless);

    /*!
     * @brief This function returns the value of member _useless
     * @return Value of member _useless
     */
    eProsima_user_DllExport uint8_t _useless() const;

    /*!
     * @brief This function returns a reference to member _useless
     * @return Reference to member _useless
     */
    eProsima_user_DllExport uint8_t& _useless();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const Multiservice_Solution_Data& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    uint8_t m__useless;
};
/*!
 * @brief This class represents the structure Multiservice_Solution defined by the user in the IDL file.
 * @ingroup MULTISERVICE
 */
class Multiservice_Solution
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Multiservice_Solution();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Multiservice_Solution();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Multiservice_Solution that will be copied.
     */
    eProsima_user_DllExport Multiservice_Solution(
            const Multiservice_Solution& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Multiservice_Solution that will be copied.
     */
    eProsima_user_DllExport Multiservice_Solution(
            Multiservice_Solution&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Multiservice_Solution that will be copied.
     */
    eProsima_user_DllExport Multiservice_Solution& operator =(
            const Multiservice_Solution& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Multiservice_Solution that will be copied.
     */
    eProsima_user_DllExport Multiservice_Solution& operator =(
            Multiservice_Solution&& x);

    /*!
     * @brief Comparison operator.
     * @param x Multiservice_Solution object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Multiservice_Solution& x) const;

    /*!
     * @brief Comparison operator.
     * @param x Multiservice_Solution object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Multiservice_Solution& x) const;

    /*!
     * @brief This function copies the value in member task_reference
     * @param _task_reference New value to be copied in member task_reference
     */
    eProsima_user_DllExport void task_reference(
            const Multiservice_TaskReference& _task_reference);

    /*!
     * @brief This function moves the value in member task_reference
     * @param _task_reference New value to be moved in member task_reference
     */
    eProsima_user_DllExport void task_reference(
            Multiservice_TaskReference&& _task_reference);

    /*!
     * @brief This function returns a constant reference to member task_reference
     * @return Constant reference to member task_reference
     */
    eProsima_user_DllExport const Multiservice_TaskReference& task_reference() const;

    /*!
     * @brief This function returns a reference to member task_reference
     * @return Reference to member task_reference
     */
    eProsima_user_DllExport Multiservice_TaskReference& task_reference();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const Multiservice_Solution& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    Multiservice_TaskReference m_task_reference;
};

#endif // _FAST_DDS_GENERATED_MULTISERVICE_H_