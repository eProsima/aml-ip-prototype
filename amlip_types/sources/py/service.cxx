// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file service.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "service.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

ServiceRequest::ServiceRequest()
{
    // m_requester_id com.eprosima.idl.parser.typecode.StringTypeCode@4278a03f
    m_requester_id ="";
    // m_request_id com.eprosima.idl.parser.typecode.PrimitiveTypeCode@147ed70f
    m_request_id = 0;

}

ServiceRequest::~ServiceRequest()
{


}

ServiceRequest::ServiceRequest(
        const ServiceRequest& x)
{
    m_requester_id = x.m_requester_id;
    m_request_id = x.m_request_id;
}

ServiceRequest::ServiceRequest(
        ServiceRequest&& x)
{
    m_requester_id = std::move(x.m_requester_id);
    m_request_id = x.m_request_id;
}

ServiceRequest& ServiceRequest::operator =(
        const ServiceRequest& x)
{

    m_requester_id = x.m_requester_id;
    m_request_id = x.m_request_id;

    return *this;
}

ServiceRequest& ServiceRequest::operator =(
        ServiceRequest&& x)
{

    m_requester_id = std::move(x.m_requester_id);
    m_request_id = x.m_request_id;

    return *this;
}

bool ServiceRequest::operator ==(
        const ServiceRequest& x) const
{

    return (m_requester_id == x.m_requester_id && m_request_id == x.m_request_id);
}

bool ServiceRequest::operator !=(
        const ServiceRequest& x) const
{
    return !(*this == x);
}

size_t ServiceRequest::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t ServiceRequest::getCdrSerializedSize(
        const ServiceRequest& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.requester_id().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void ServiceRequest::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_requester_id;
    scdr << m_request_id;

}

void ServiceRequest::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_requester_id;
    dcdr >> m_request_id;
}

/*!
 * @brief This function copies the value in member requester_id
 * @param _requester_id New value to be copied in member requester_id
 */
void ServiceRequest::requester_id(
        const std::string& _requester_id)
{
    m_requester_id = _requester_id;
}

/*!
 * @brief This function moves the value in member requester_id
 * @param _requester_id New value to be moved in member requester_id
 */
void ServiceRequest::requester_id(
        std::string&& _requester_id)
{
    m_requester_id = std::move(_requester_id);
}

/*!
 * @brief This function returns a constant reference to member requester_id
 * @return Constant reference to member requester_id
 */
const std::string& ServiceRequest::requester_id() const
{
    return m_requester_id;
}

/*!
 * @brief This function returns a reference to member requester_id
 * @return Reference to member requester_id
 */
std::string& ServiceRequest::requester_id()
{
    return m_requester_id;
}
/*!
 * @brief This function sets a value in member request_id
 * @param _request_id New value for member request_id
 */
void ServiceRequest::request_id(
        uint32_t _request_id)
{
    m_request_id = _request_id;
}

/*!
 * @brief This function returns the value of member request_id
 * @return Value of member request_id
 */
uint32_t ServiceRequest::request_id() const
{
    return m_request_id;
}

/*!
 * @brief This function returns a reference to member request_id
 * @return Reference to member request_id
 */
uint32_t& ServiceRequest::request_id()
{
    return m_request_id;
}


size_t ServiceRequest::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;





    return current_align;
}

bool ServiceRequest::isKeyDefined()
{
    return false;
}

void ServiceRequest::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}

ProcessingRequest::ProcessingRequest()
{
    // m_requester_id com.eprosima.idl.parser.typecode.StringTypeCode@1fe20588
    m_requester_id ="";
    // m_request_id com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6ce139a4
    m_request_id = 0;
    // m_server_id com.eprosima.idl.parser.typecode.StringTypeCode@6973bf95
    m_server_id ="";

}

ProcessingRequest::~ProcessingRequest()
{



}

ProcessingRequest::ProcessingRequest(
        const ProcessingRequest& x)
{
    m_requester_id = x.m_requester_id;
    m_request_id = x.m_request_id;
    m_server_id = x.m_server_id;
}

ProcessingRequest::ProcessingRequest(
        ProcessingRequest&& x)
{
    m_requester_id = std::move(x.m_requester_id);
    m_request_id = x.m_request_id;
    m_server_id = std::move(x.m_server_id);
}

ProcessingRequest& ProcessingRequest::operator =(
        const ProcessingRequest& x)
{

    m_requester_id = x.m_requester_id;
    m_request_id = x.m_request_id;
    m_server_id = x.m_server_id;

    return *this;
}

ProcessingRequest& ProcessingRequest::operator =(
        ProcessingRequest&& x)
{

    m_requester_id = std::move(x.m_requester_id);
    m_request_id = x.m_request_id;
    m_server_id = std::move(x.m_server_id);

    return *this;
}

bool ProcessingRequest::operator ==(
        const ProcessingRequest& x) const
{

    return (m_requester_id == x.m_requester_id && m_request_id == x.m_request_id && m_server_id == x.m_server_id);
}

bool ProcessingRequest::operator !=(
        const ProcessingRequest& x) const
{
    return !(*this == x);
}

size_t ProcessingRequest::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;


    return current_alignment - initial_alignment;
}

size_t ProcessingRequest::getCdrSerializedSize(
        const ProcessingRequest& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.requester_id().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.server_id().size() + 1;


    return current_alignment - initial_alignment;
}

void ProcessingRequest::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_requester_id;
    scdr << m_request_id;
    scdr << m_server_id;

}

void ProcessingRequest::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_requester_id;
    dcdr >> m_request_id;
    dcdr >> m_server_id;
}

/*!
 * @brief This function copies the value in member requester_id
 * @param _requester_id New value to be copied in member requester_id
 */
void ProcessingRequest::requester_id(
        const std::string& _requester_id)
{
    m_requester_id = _requester_id;
}

/*!
 * @brief This function moves the value in member requester_id
 * @param _requester_id New value to be moved in member requester_id
 */
void ProcessingRequest::requester_id(
        std::string&& _requester_id)
{
    m_requester_id = std::move(_requester_id);
}

/*!
 * @brief This function returns a constant reference to member requester_id
 * @return Constant reference to member requester_id
 */
const std::string& ProcessingRequest::requester_id() const
{
    return m_requester_id;
}

/*!
 * @brief This function returns a reference to member requester_id
 * @return Reference to member requester_id
 */
std::string& ProcessingRequest::requester_id()
{
    return m_requester_id;
}
/*!
 * @brief This function sets a value in member request_id
 * @param _request_id New value for member request_id
 */
void ProcessingRequest::request_id(
        uint32_t _request_id)
{
    m_request_id = _request_id;
}

/*!
 * @brief This function returns the value of member request_id
 * @return Value of member request_id
 */
uint32_t ProcessingRequest::request_id() const
{
    return m_request_id;
}

/*!
 * @brief This function returns a reference to member request_id
 * @return Reference to member request_id
 */
uint32_t& ProcessingRequest::request_id()
{
    return m_request_id;
}

/*!
 * @brief This function copies the value in member server_id
 * @param _server_id New value to be copied in member server_id
 */
void ProcessingRequest::server_id(
        const std::string& _server_id)
{
    m_server_id = _server_id;
}

/*!
 * @brief This function moves the value in member server_id
 * @param _server_id New value to be moved in member server_id
 */
void ProcessingRequest::server_id(
        std::string&& _server_id)
{
    m_server_id = std::move(_server_id);
}

/*!
 * @brief This function returns a constant reference to member server_id
 * @return Constant reference to member server_id
 */
const std::string& ProcessingRequest::server_id() const
{
    return m_server_id;
}

/*!
 * @brief This function returns a reference to member server_id
 * @return Reference to member server_id
 */
std::string& ProcessingRequest::server_id()
{
    return m_server_id;
}

size_t ProcessingRequest::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;






    return current_align;
}

bool ProcessingRequest::isKeyDefined()
{
    return false;
}

void ProcessingRequest::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
       
}
