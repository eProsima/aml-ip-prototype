// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file multiservice.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "multiservice.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

Multiservice_RequestAvailability::Multiservice_RequestAvailability()
{
    // m_requester_id com.eprosima.idl.parser.typecode.StringTypeCode@18ce0030
    m_requester_id ="";
    // m_task_id com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4445629
    m_task_id = 0;

}

Multiservice_RequestAvailability::~Multiservice_RequestAvailability()
{


}

Multiservice_RequestAvailability::Multiservice_RequestAvailability(
        const Multiservice_RequestAvailability& x)
{
    m_requester_id = x.m_requester_id;
    m_task_id = x.m_task_id;
}

Multiservice_RequestAvailability::Multiservice_RequestAvailability(
        Multiservice_RequestAvailability&& x)
{
    m_requester_id = std::move(x.m_requester_id);
    m_task_id = x.m_task_id;
}

Multiservice_RequestAvailability& Multiservice_RequestAvailability::operator =(
        const Multiservice_RequestAvailability& x)
{

    m_requester_id = x.m_requester_id;
    m_task_id = x.m_task_id;

    return *this;
}

Multiservice_RequestAvailability& Multiservice_RequestAvailability::operator =(
        Multiservice_RequestAvailability&& x)
{

    m_requester_id = std::move(x.m_requester_id);
    m_task_id = x.m_task_id;

    return *this;
}

bool Multiservice_RequestAvailability::operator ==(
        const Multiservice_RequestAvailability& x) const
{

    return (m_requester_id == x.m_requester_id && m_task_id == x.m_task_id);
}

bool Multiservice_RequestAvailability::operator !=(
        const Multiservice_RequestAvailability& x) const
{
    return !(*this == x);
}

size_t Multiservice_RequestAvailability::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t Multiservice_RequestAvailability::getCdrSerializedSize(
        const Multiservice_RequestAvailability& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.requester_id().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void Multiservice_RequestAvailability::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_requester_id;
    scdr << m_task_id;

}

void Multiservice_RequestAvailability::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_requester_id;
    dcdr >> m_task_id;
}

/*!
 * @brief This function copies the value in member requester_id
 * @param _requester_id New value to be copied in member requester_id
 */
void Multiservice_RequestAvailability::requester_id(
        const std::string& _requester_id)
{
    m_requester_id = _requester_id;
}

/*!
 * @brief This function moves the value in member requester_id
 * @param _requester_id New value to be moved in member requester_id
 */
void Multiservice_RequestAvailability::requester_id(
        std::string&& _requester_id)
{
    m_requester_id = std::move(_requester_id);
}

/*!
 * @brief This function returns a constant reference to member requester_id
 * @return Constant reference to member requester_id
 */
const std::string& Multiservice_RequestAvailability::requester_id() const
{
    return m_requester_id;
}

/*!
 * @brief This function returns a reference to member requester_id
 * @return Reference to member requester_id
 */
std::string& Multiservice_RequestAvailability::requester_id()
{
    return m_requester_id;
}
/*!
 * @brief This function sets a value in member task_id
 * @param _task_id New value for member task_id
 */
void Multiservice_RequestAvailability::task_id(
        uint32_t _task_id)
{
    m_task_id = _task_id;
}

/*!
 * @brief This function returns the value of member task_id
 * @return Value of member task_id
 */
uint32_t Multiservice_RequestAvailability::task_id() const
{
    return m_task_id;
}

/*!
 * @brief This function returns a reference to member task_id
 * @return Reference to member task_id
 */
uint32_t& Multiservice_RequestAvailability::task_id()
{
    return m_task_id;
}


size_t Multiservice_RequestAvailability::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;





    return current_align;
}

bool Multiservice_RequestAvailability::isKeyDefined()
{
    return false;
}

void Multiservice_RequestAvailability::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
      
}

Multiservice_TaskReference::Multiservice_TaskReference()
{
    // m_requester_id com.eprosima.idl.parser.typecode.StringTypeCode@45b9a632
    m_requester_id ="";
    // m_task_id com.eprosima.idl.parser.typecode.PrimitiveTypeCode@25d250c6
    m_task_id = 0;
    // m_server_id com.eprosima.idl.parser.typecode.StringTypeCode@4df50bcc
    m_server_id ="";

}

Multiservice_TaskReference::~Multiservice_TaskReference()
{



}

Multiservice_TaskReference::Multiservice_TaskReference(
        const Multiservice_TaskReference& x)
{
    m_requester_id = x.m_requester_id;
    m_task_id = x.m_task_id;
    m_server_id = x.m_server_id;
}

Multiservice_TaskReference::Multiservice_TaskReference(
        Multiservice_TaskReference&& x)
{
    m_requester_id = std::move(x.m_requester_id);
    m_task_id = x.m_task_id;
    m_server_id = std::move(x.m_server_id);
}

Multiservice_TaskReference& Multiservice_TaskReference::operator =(
        const Multiservice_TaskReference& x)
{

    m_requester_id = x.m_requester_id;
    m_task_id = x.m_task_id;
    m_server_id = x.m_server_id;

    return *this;
}

Multiservice_TaskReference& Multiservice_TaskReference::operator =(
        Multiservice_TaskReference&& x)
{

    m_requester_id = std::move(x.m_requester_id);
    m_task_id = x.m_task_id;
    m_server_id = std::move(x.m_server_id);

    return *this;
}

bool Multiservice_TaskReference::operator ==(
        const Multiservice_TaskReference& x) const
{

    return (m_requester_id == x.m_requester_id && m_task_id == x.m_task_id && m_server_id == x.m_server_id);
}

bool Multiservice_TaskReference::operator !=(
        const Multiservice_TaskReference& x) const
{
    return !(*this == x);
}

size_t Multiservice_TaskReference::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;


    return current_alignment - initial_alignment;
}

size_t Multiservice_TaskReference::getCdrSerializedSize(
        const Multiservice_TaskReference& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.requester_id().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.server_id().size() + 1;


    return current_alignment - initial_alignment;
}

void Multiservice_TaskReference::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_requester_id;
    scdr << m_task_id;
    scdr << m_server_id;

}

void Multiservice_TaskReference::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_requester_id;
    dcdr >> m_task_id;
    dcdr >> m_server_id;
}

/*!
 * @brief This function copies the value in member requester_id
 * @param _requester_id New value to be copied in member requester_id
 */
void Multiservice_TaskReference::requester_id(
        const std::string& _requester_id)
{
    m_requester_id = _requester_id;
}

/*!
 * @brief This function moves the value in member requester_id
 * @param _requester_id New value to be moved in member requester_id
 */
void Multiservice_TaskReference::requester_id(
        std::string&& _requester_id)
{
    m_requester_id = std::move(_requester_id);
}

/*!
 * @brief This function returns a constant reference to member requester_id
 * @return Constant reference to member requester_id
 */
const std::string& Multiservice_TaskReference::requester_id() const
{
    return m_requester_id;
}

/*!
 * @brief This function returns a reference to member requester_id
 * @return Reference to member requester_id
 */
std::string& Multiservice_TaskReference::requester_id()
{
    return m_requester_id;
}
/*!
 * @brief This function sets a value in member task_id
 * @param _task_id New value for member task_id
 */
void Multiservice_TaskReference::task_id(
        uint32_t _task_id)
{
    m_task_id = _task_id;
}

/*!
 * @brief This function returns the value of member task_id
 * @return Value of member task_id
 */
uint32_t Multiservice_TaskReference::task_id() const
{
    return m_task_id;
}

/*!
 * @brief This function returns a reference to member task_id
 * @return Reference to member task_id
 */
uint32_t& Multiservice_TaskReference::task_id()
{
    return m_task_id;
}

/*!
 * @brief This function copies the value in member server_id
 * @param _server_id New value to be copied in member server_id
 */
void Multiservice_TaskReference::server_id(
        const std::string& _server_id)
{
    m_server_id = _server_id;
}

/*!
 * @brief This function moves the value in member server_id
 * @param _server_id New value to be moved in member server_id
 */
void Multiservice_TaskReference::server_id(
        std::string&& _server_id)
{
    m_server_id = std::move(_server_id);
}

/*!
 * @brief This function returns a constant reference to member server_id
 * @return Constant reference to member server_id
 */
const std::string& Multiservice_TaskReference::server_id() const
{
    return m_server_id;
}

/*!
 * @brief This function returns a reference to member server_id
 * @return Reference to member server_id
 */
std::string& Multiservice_TaskReference::server_id()
{
    return m_server_id;
}

size_t Multiservice_TaskReference::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;






    return current_align;
}

bool Multiservice_TaskReference::isKeyDefined()
{
    return false;
}

void Multiservice_TaskReference::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
       
}

Multiservice_Task_Data::Multiservice_Task_Data()
{
    // m__useless com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6b26e945
    m__useless = 0;

}

Multiservice_Task_Data::~Multiservice_Task_Data()
{
}

Multiservice_Task_Data::Multiservice_Task_Data(
        const Multiservice_Task_Data& x)
{
    m__useless = x.m__useless;
}

Multiservice_Task_Data::Multiservice_Task_Data(
        Multiservice_Task_Data&& x)
{
    m__useless = x.m__useless;
}

Multiservice_Task_Data& Multiservice_Task_Data::operator =(
        const Multiservice_Task_Data& x)
{

    m__useless = x.m__useless;

    return *this;
}

Multiservice_Task_Data& Multiservice_Task_Data::operator =(
        Multiservice_Task_Data&& x)
{

    m__useless = x.m__useless;

    return *this;
}

bool Multiservice_Task_Data::operator ==(
        const Multiservice_Task_Data& x) const
{

    return (m__useless == x.m__useless);
}

bool Multiservice_Task_Data::operator !=(
        const Multiservice_Task_Data& x) const
{
    return !(*this == x);
}

size_t Multiservice_Task_Data::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

size_t Multiservice_Task_Data::getCdrSerializedSize(
        const Multiservice_Task_Data& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

void Multiservice_Task_Data::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m__useless;

}

void Multiservice_Task_Data::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m__useless;
}

/*!
 * @brief This function sets a value in member _useless
 * @param __useless New value for member _useless
 */
void Multiservice_Task_Data::_useless(
        uint8_t __useless)
{
    m__useless = __useless;
}

/*!
 * @brief This function returns the value of member _useless
 * @return Value of member _useless
 */
uint8_t Multiservice_Task_Data::_useless() const
{
    return m__useless;
}

/*!
 * @brief This function returns a reference to member _useless
 * @return Reference to member _useless
 */
uint8_t& Multiservice_Task_Data::_useless()
{
    return m__useless;
}


size_t Multiservice_Task_Data::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool Multiservice_Task_Data::isKeyDefined()
{
    return false;
}

void Multiservice_Task_Data::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
     
}

Multiservice_Task::Multiservice_Task()
{
    // m_task_reference com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@63a65a25


}

Multiservice_Task::~Multiservice_Task()
{
}

Multiservice_Task::Multiservice_Task(
        const Multiservice_Task& x)
{
    m_task_reference = x.m_task_reference;
}

Multiservice_Task::Multiservice_Task(
        Multiservice_Task&& x)
{
    m_task_reference = std::move(x.m_task_reference);
}

Multiservice_Task& Multiservice_Task::operator =(
        const Multiservice_Task& x)
{

    m_task_reference = x.m_task_reference;

    return *this;
}

Multiservice_Task& Multiservice_Task::operator =(
        Multiservice_Task&& x)
{

    m_task_reference = std::move(x.m_task_reference);

    return *this;
}

bool Multiservice_Task::operator ==(
        const Multiservice_Task& x) const
{

    return (m_task_reference == x.m_task_reference);
}

bool Multiservice_Task::operator !=(
        const Multiservice_Task& x) const
{
    return !(*this == x);
}

size_t Multiservice_Task::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += Multiservice_TaskReference::getMaxCdrSerializedSize(current_alignment);

    return current_alignment - initial_alignment;
}

size_t Multiservice_Task::getCdrSerializedSize(
        const Multiservice_Task& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += Multiservice_TaskReference::getCdrSerializedSize(data.task_reference(), current_alignment);

    return current_alignment - initial_alignment;
}

void Multiservice_Task::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_task_reference;

}

void Multiservice_Task::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_task_reference;
}

/*!
 * @brief This function copies the value in member task_reference
 * @param _task_reference New value to be copied in member task_reference
 */
void Multiservice_Task::task_reference(
        const Multiservice_TaskReference& _task_reference)
{
    m_task_reference = _task_reference;
}

/*!
 * @brief This function moves the value in member task_reference
 * @param _task_reference New value to be moved in member task_reference
 */
void Multiservice_Task::task_reference(
        Multiservice_TaskReference&& _task_reference)
{
    m_task_reference = std::move(_task_reference);
}

/*!
 * @brief This function returns a constant reference to member task_reference
 * @return Constant reference to member task_reference
 */
const Multiservice_TaskReference& Multiservice_Task::task_reference() const
{
    return m_task_reference;
}

/*!
 * @brief This function returns a reference to member task_reference
 * @return Reference to member task_reference
 */
Multiservice_TaskReference& Multiservice_Task::task_reference()
{
    return m_task_reference;
}

size_t Multiservice_Task::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool Multiservice_Task::isKeyDefined()
{
    return false;
}

void Multiservice_Task::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
     
}

Multiservice_Solution_Data::Multiservice_Solution_Data()
{
    // m__useless com.eprosima.idl.parser.typecode.PrimitiveTypeCode@54c562f7
    m__useless = 0;

}

Multiservice_Solution_Data::~Multiservice_Solution_Data()
{
}

Multiservice_Solution_Data::Multiservice_Solution_Data(
        const Multiservice_Solution_Data& x)
{
    m__useless = x.m__useless;
}

Multiservice_Solution_Data::Multiservice_Solution_Data(
        Multiservice_Solution_Data&& x)
{
    m__useless = x.m__useless;
}

Multiservice_Solution_Data& Multiservice_Solution_Data::operator =(
        const Multiservice_Solution_Data& x)
{

    m__useless = x.m__useless;

    return *this;
}

Multiservice_Solution_Data& Multiservice_Solution_Data::operator =(
        Multiservice_Solution_Data&& x)
{

    m__useless = x.m__useless;

    return *this;
}

bool Multiservice_Solution_Data::operator ==(
        const Multiservice_Solution_Data& x) const
{

    return (m__useless == x.m__useless);
}

bool Multiservice_Solution_Data::operator !=(
        const Multiservice_Solution_Data& x) const
{
    return !(*this == x);
}

size_t Multiservice_Solution_Data::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

size_t Multiservice_Solution_Data::getCdrSerializedSize(
        const Multiservice_Solution_Data& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

void Multiservice_Solution_Data::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m__useless;

}

void Multiservice_Solution_Data::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m__useless;
}

/*!
 * @brief This function sets a value in member _useless
 * @param __useless New value for member _useless
 */
void Multiservice_Solution_Data::_useless(
        uint8_t __useless)
{
    m__useless = __useless;
}

/*!
 * @brief This function returns the value of member _useless
 * @return Value of member _useless
 */
uint8_t Multiservice_Solution_Data::_useless() const
{
    return m__useless;
}

/*!
 * @brief This function returns a reference to member _useless
 * @return Reference to member _useless
 */
uint8_t& Multiservice_Solution_Data::_useless()
{
    return m__useless;
}


size_t Multiservice_Solution_Data::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool Multiservice_Solution_Data::isKeyDefined()
{
    return false;
}

void Multiservice_Solution_Data::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
     
}

Multiservice_Solution::Multiservice_Solution()
{
    // m_task_reference com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@63a65a25


}

Multiservice_Solution::~Multiservice_Solution()
{
}

Multiservice_Solution::Multiservice_Solution(
        const Multiservice_Solution& x)
{
    m_task_reference = x.m_task_reference;
}

Multiservice_Solution::Multiservice_Solution(
        Multiservice_Solution&& x)
{
    m_task_reference = std::move(x.m_task_reference);
}

Multiservice_Solution& Multiservice_Solution::operator =(
        const Multiservice_Solution& x)
{

    m_task_reference = x.m_task_reference;

    return *this;
}

Multiservice_Solution& Multiservice_Solution::operator =(
        Multiservice_Solution&& x)
{

    m_task_reference = std::move(x.m_task_reference);

    return *this;
}

bool Multiservice_Solution::operator ==(
        const Multiservice_Solution& x) const
{

    return (m_task_reference == x.m_task_reference);
}

bool Multiservice_Solution::operator !=(
        const Multiservice_Solution& x) const
{
    return !(*this == x);
}

size_t Multiservice_Solution::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += Multiservice_TaskReference::getMaxCdrSerializedSize(current_alignment);

    return current_alignment - initial_alignment;
}

size_t Multiservice_Solution::getCdrSerializedSize(
        const Multiservice_Solution& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += Multiservice_TaskReference::getCdrSerializedSize(data.task_reference(), current_alignment);

    return current_alignment - initial_alignment;
}

void Multiservice_Solution::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_task_reference;

}

void Multiservice_Solution::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_task_reference;
}

/*!
 * @brief This function copies the value in member task_reference
 * @param _task_reference New value to be copied in member task_reference
 */
void Multiservice_Solution::task_reference(
        const Multiservice_TaskReference& _task_reference)
{
    m_task_reference = _task_reference;
}

/*!
 * @brief This function moves the value in member task_reference
 * @param _task_reference New value to be moved in member task_reference
 */
void Multiservice_Solution::task_reference(
        Multiservice_TaskReference&& _task_reference)
{
    m_task_reference = std::move(_task_reference);
}

/*!
 * @brief This function returns a constant reference to member task_reference
 * @return Constant reference to member task_reference
 */
const Multiservice_TaskReference& Multiservice_Solution::task_reference() const
{
    return m_task_reference;
}

/*!
 * @brief This function returns a reference to member task_reference
 * @return Reference to member task_reference
 */
Multiservice_TaskReference& Multiservice_Solution::task_reference()
{
    return m_task_reference;
}

size_t Multiservice_Solution::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;



    return current_align;
}

bool Multiservice_Solution::isKeyDefined()
{
    return false;
}

void Multiservice_Solution::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
     
}
