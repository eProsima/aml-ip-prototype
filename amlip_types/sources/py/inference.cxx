// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file inference.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "inference.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

Inference_Task_Data::Inference_Task_Data()    : Multiservice_Task_Data() 
{
    // m_inference com.eprosima.idl.parser.typecode.SequenceTypeCode@37574691


}

Inference_Task_Data::~Inference_Task_Data()
{
}

Inference_Task_Data::Inference_Task_Data(
        const Inference_Task_Data& x)    : Multiservice_Task_Data(x) 
{
    m_inference = x.m_inference;
}

Inference_Task_Data::Inference_Task_Data(
        Inference_Task_Data&& x)    : Multiservice_Task_Data(std::move(x)) 
{
    m_inference = std::move(x.m_inference);
}

Inference_Task_Data& Inference_Task_Data::operator =(
        const Inference_Task_Data& x)
{
    Multiservice_Task_Data::operator =(x); 

    m_inference = x.m_inference;

    return *this;
}

Inference_Task_Data& Inference_Task_Data::operator =(
        Inference_Task_Data&& x)
{
    Multiservice_Task_Data::operator =(std::move(x)); 

    m_inference = std::move(x.m_inference);

    return *this;
}

bool Inference_Task_Data::operator ==(
        const Inference_Task_Data& x) const
{
     if (Multiservice_Task_Data::operator !=(x)) return false; 

    return (m_inference == x.m_inference);
}

bool Inference_Task_Data::operator !=(
        const Inference_Task_Data& x) const
{
    return !(*this == x);
}

size_t Inference_Task_Data::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    current_alignment += Multiservice_Task_Data::getMaxCdrSerializedSize(current_alignment); 

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t Inference_Task_Data::getCdrSerializedSize(
        const Inference_Task_Data& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += Multiservice_Task_Data::getCdrSerializedSize(data, current_alignment); 

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.inference().size() > 0)
    {
        current_alignment += (data.inference().size() * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }



    return current_alignment - initial_alignment;
}

void Inference_Task_Data::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    Multiservice_Task_Data::serialize(scdr); 

    scdr << m_inference;
}

void Inference_Task_Data::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
    Multiservice_Task_Data::deserialize(dcdr); 

    dcdr >> m_inference;}

/*!
 * @brief This function copies the value in member inference
 * @param _inference New value to be copied in member inference
 */
void Inference_Task_Data::inference(
        const std::vector<uint8_t>& _inference)
{
    m_inference = _inference;
}

/*!
 * @brief This function moves the value in member inference
 * @param _inference New value to be moved in member inference
 */
void Inference_Task_Data::inference(
        std::vector<uint8_t>&& _inference)
{
    m_inference = std::move(_inference);
}

/*!
 * @brief This function returns a constant reference to member inference
 * @return Constant reference to member inference
 */
const std::vector<uint8_t>& Inference_Task_Data::inference() const
{
    return m_inference;
}

/*!
 * @brief This function returns a reference to member inference
 * @return Reference to member inference
 */
std::vector<uint8_t>& Inference_Task_Data::inference()
{
    return m_inference;
}

size_t Inference_Task_Data::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;

    current_align += Multiservice_Task_Data::getKeyMaxCdrSerializedSize(current_align); 


    return current_align;
}

bool Inference_Task_Data::isKeyDefined()
{
    if (Multiservice_Task_Data::isKeyDefined())
        return true;
     return false;
}

void Inference_Task_Data::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
    Multiservice_Task_Data::serializeKey(scdr); 
     
}

Inference_Solution_Data::Inference_Solution_Data()    : Multiservice_Solution_Data() 
{
    // m_solution com.eprosima.idl.parser.typecode.SequenceTypeCode@442675e1


}

Inference_Solution_Data::~Inference_Solution_Data()
{
}

Inference_Solution_Data::Inference_Solution_Data(
        const Inference_Solution_Data& x)    : Multiservice_Solution_Data(x) 
{
    m_solution = x.m_solution;
}

Inference_Solution_Data::Inference_Solution_Data(
        Inference_Solution_Data&& x)    : Multiservice_Solution_Data(std::move(x)) 
{
    m_solution = std::move(x.m_solution);
}

Inference_Solution_Data& Inference_Solution_Data::operator =(
        const Inference_Solution_Data& x)
{
    Multiservice_Solution_Data::operator =(x); 

    m_solution = x.m_solution;

    return *this;
}

Inference_Solution_Data& Inference_Solution_Data::operator =(
        Inference_Solution_Data&& x)
{
    Multiservice_Solution_Data::operator =(std::move(x)); 

    m_solution = std::move(x.m_solution);

    return *this;
}

bool Inference_Solution_Data::operator ==(
        const Inference_Solution_Data& x) const
{
     if (Multiservice_Solution_Data::operator !=(x)) return false; 

    return (m_solution == x.m_solution);
}

bool Inference_Solution_Data::operator !=(
        const Inference_Solution_Data& x) const
{
    return !(*this == x);
}

size_t Inference_Solution_Data::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    current_alignment += Multiservice_Solution_Data::getMaxCdrSerializedSize(current_alignment); 

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t Inference_Solution_Data::getCdrSerializedSize(
        const Inference_Solution_Data& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += Multiservice_Solution_Data::getCdrSerializedSize(data, current_alignment); 

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    if (data.solution().size() > 0)
    {
        current_alignment += (data.solution().size() * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }



    return current_alignment - initial_alignment;
}

void Inference_Solution_Data::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    Multiservice_Solution_Data::serialize(scdr); 

    scdr << m_solution;
}

void Inference_Solution_Data::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
    Multiservice_Solution_Data::deserialize(dcdr); 

    dcdr >> m_solution;}

/*!
 * @brief This function copies the value in member solution
 * @param _solution New value to be copied in member solution
 */
void Inference_Solution_Data::solution(
        const std::vector<uint8_t>& _solution)
{
    m_solution = _solution;
}

/*!
 * @brief This function moves the value in member solution
 * @param _solution New value to be moved in member solution
 */
void Inference_Solution_Data::solution(
        std::vector<uint8_t>&& _solution)
{
    m_solution = std::move(_solution);
}

/*!
 * @brief This function returns a constant reference to member solution
 * @return Constant reference to member solution
 */
const std::vector<uint8_t>& Inference_Solution_Data::solution() const
{
    return m_solution;
}

/*!
 * @brief This function returns a reference to member solution
 * @return Reference to member solution
 */
std::vector<uint8_t>& Inference_Solution_Data::solution()
{
    return m_solution;
}

size_t Inference_Solution_Data::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;

    current_align += Multiservice_Solution_Data::getKeyMaxCdrSerializedSize(current_align); 


    return current_align;
}

bool Inference_Solution_Data::isKeyDefined()
{
    if (Multiservice_Solution_Data::isKeyDefined())
        return true;
     return false;
}

void Inference_Solution_Data::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
    Multiservice_Solution_Data::serializeKey(scdr); 
     
}

Inference_Task::Inference_Task()    : Multiservice_Task() 
{
    // m_data com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@3d3fcdb0


}

Inference_Task::~Inference_Task()
{
}

Inference_Task::Inference_Task(
        const Inference_Task& x)    : Multiservice_Task(x) 
{
    m_data = x.m_data;
}

Inference_Task::Inference_Task(
        Inference_Task&& x)    : Multiservice_Task(std::move(x)) 
{
    m_data = std::move(x.m_data);
}

Inference_Task& Inference_Task::operator =(
        const Inference_Task& x)
{
    Multiservice_Task::operator =(x); 

    m_data = x.m_data;

    return *this;
}

Inference_Task& Inference_Task::operator =(
        Inference_Task&& x)
{
    Multiservice_Task::operator =(std::move(x)); 

    m_data = std::move(x.m_data);

    return *this;
}

bool Inference_Task::operator ==(
        const Inference_Task& x) const
{
     if (Multiservice_Task::operator !=(x)) return false; 

    return (m_data == x.m_data);
}

bool Inference_Task::operator !=(
        const Inference_Task& x) const
{
    return !(*this == x);
}

size_t Inference_Task::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    current_alignment += Multiservice_Task::getMaxCdrSerializedSize(current_alignment); 

    current_alignment += Inference_Task_Data::getMaxCdrSerializedSize(current_alignment);

    return current_alignment - initial_alignment;
}

size_t Inference_Task::getCdrSerializedSize(
        const Inference_Task& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += Multiservice_Task::getCdrSerializedSize(data, current_alignment); 

    current_alignment += Inference_Task_Data::getCdrSerializedSize(data.data(), current_alignment);

    return current_alignment - initial_alignment;
}

void Inference_Task::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    Multiservice_Task::serialize(scdr); 

    scdr << m_data;

}

void Inference_Task::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
    Multiservice_Task::deserialize(dcdr); 

    dcdr >> m_data;
}

/*!
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
void Inference_Task::data(
        const Inference_Task_Data& _data)
{
    m_data = _data;
}

/*!
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
void Inference_Task::data(
        Inference_Task_Data&& _data)
{
    m_data = std::move(_data);
}

/*!
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
const Inference_Task_Data& Inference_Task::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
Inference_Task_Data& Inference_Task::data()
{
    return m_data;
}

size_t Inference_Task::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;

    current_align += Multiservice_Task::getKeyMaxCdrSerializedSize(current_align); 


    return current_align;
}

bool Inference_Task::isKeyDefined()
{
    if (Multiservice_Task::isKeyDefined())
        return true;
     return false;
}

void Inference_Task::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
    Multiservice_Task::serializeKey(scdr); 
     
}

Inference_Solution::Inference_Solution()    : Multiservice_Solution() 
{
    // m_data com.eprosima.fastdds.idl.parser.typecode.StructTypeCode@38364841


}

Inference_Solution::~Inference_Solution()
{
}

Inference_Solution::Inference_Solution(
        const Inference_Solution& x)    : Multiservice_Solution(x) 
{
    m_data = x.m_data;
}

Inference_Solution::Inference_Solution(
        Inference_Solution&& x)    : Multiservice_Solution(std::move(x)) 
{
    m_data = std::move(x.m_data);
}

Inference_Solution& Inference_Solution::operator =(
        const Inference_Solution& x)
{
    Multiservice_Solution::operator =(x); 

    m_data = x.m_data;

    return *this;
}

Inference_Solution& Inference_Solution::operator =(
        Inference_Solution&& x)
{
    Multiservice_Solution::operator =(std::move(x)); 

    m_data = std::move(x.m_data);

    return *this;
}

bool Inference_Solution::operator ==(
        const Inference_Solution& x) const
{
     if (Multiservice_Solution::operator !=(x)) return false; 

    return (m_data == x.m_data);
}

bool Inference_Solution::operator !=(
        const Inference_Solution& x) const
{
    return !(*this == x);
}

size_t Inference_Solution::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    current_alignment += Multiservice_Solution::getMaxCdrSerializedSize(current_alignment); 

    current_alignment += Inference_Solution_Data::getMaxCdrSerializedSize(current_alignment);

    return current_alignment - initial_alignment;
}

size_t Inference_Solution::getCdrSerializedSize(
        const Inference_Solution& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += Multiservice_Solution::getCdrSerializedSize(data, current_alignment); 

    current_alignment += Inference_Solution_Data::getCdrSerializedSize(data.data(), current_alignment);

    return current_alignment - initial_alignment;
}

void Inference_Solution::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{
    Multiservice_Solution::serialize(scdr); 

    scdr << m_data;

}

void Inference_Solution::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{
    Multiservice_Solution::deserialize(dcdr); 

    dcdr >> m_data;
}

/*!
 * @brief This function copies the value in member data
 * @param _data New value to be copied in member data
 */
void Inference_Solution::data(
        const Inference_Solution_Data& _data)
{
    m_data = _data;
}

/*!
 * @brief This function moves the value in member data
 * @param _data New value to be moved in member data
 */
void Inference_Solution::data(
        Inference_Solution_Data&& _data)
{
    m_data = std::move(_data);
}

/*!
 * @brief This function returns a constant reference to member data
 * @return Constant reference to member data
 */
const Inference_Solution_Data& Inference_Solution::data() const
{
    return m_data;
}

/*!
 * @brief This function returns a reference to member data
 * @return Reference to member data
 */
Inference_Solution_Data& Inference_Solution::data()
{
    return m_data;
}

size_t Inference_Solution::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    size_t current_align = current_alignment;

    current_align += Multiservice_Solution::getKeyMaxCdrSerializedSize(current_align); 


    return current_align;
}

bool Inference_Solution::isKeyDefined()
{
    if (Multiservice_Solution::isKeyDefined())
        return true;
     return false;
}

void Inference_Solution::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
    Multiservice_Solution::serializeKey(scdr); 
     
}
