// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file inference.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_INFERENCE_H_
#define _FAST_DDS_GENERATED_INFERENCE_H_

#include "multiservice.h"

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(inference_SOURCE)
#define inference_DllAPI __declspec( dllexport )
#else
#define inference_DllAPI __declspec( dllimport )
#endif // inference_SOURCE
#else
#define inference_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define inference_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


/*!
 * @brief This class represents the structure Inference_Task_Data defined by the user in the IDL file.
 * @ingroup INFERENCE
 */
class Inference_Task_Data : public Multiservice_Task_Data 
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Inference_Task_Data();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport virtual ~Inference_Task_Data();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Inference_Task_Data that will be copied.
     */
    eProsima_user_DllExport Inference_Task_Data(
            const Inference_Task_Data& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Inference_Task_Data that will be copied.
     */
    eProsima_user_DllExport Inference_Task_Data(
            Inference_Task_Data&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Inference_Task_Data that will be copied.
     */
    eProsima_user_DllExport Inference_Task_Data& operator =(
            const Inference_Task_Data& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Inference_Task_Data that will be copied.
     */
    eProsima_user_DllExport Inference_Task_Data& operator =(
            Inference_Task_Data&& x);

    /*!
     * @brief Comparison operator.
     * @param x Inference_Task_Data object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Inference_Task_Data& x) const;

    /*!
     * @brief Comparison operator.
     * @param x Inference_Task_Data object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Inference_Task_Data& x) const;

    /*!
     * @brief This function copies the value in member inference
     * @param _inference New value to be copied in member inference
     */
    eProsima_user_DllExport void inference(
            const std::vector<uint8_t>& _inference);

    /*!
     * @brief This function moves the value in member inference
     * @param _inference New value to be moved in member inference
     */
    eProsima_user_DllExport void inference(
            std::vector<uint8_t>&& _inference);

    /*!
     * @brief This function returns a constant reference to member inference
     * @return Constant reference to member inference
     */
    eProsima_user_DllExport const std::vector<uint8_t>& inference() const;

    /*!
     * @brief This function returns a reference to member inference
     * @return Reference to member inference
     */
    eProsima_user_DllExport std::vector<uint8_t>& inference();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const Inference_Task_Data& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    std::vector<uint8_t> m_inference;
};
/*!
 * @brief This class represents the structure Inference_Solution_Data defined by the user in the IDL file.
 * @ingroup INFERENCE
 */
class Inference_Solution_Data : public Multiservice_Solution_Data 
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Inference_Solution_Data();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport virtual ~Inference_Solution_Data();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Inference_Solution_Data that will be copied.
     */
    eProsima_user_DllExport Inference_Solution_Data(
            const Inference_Solution_Data& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Inference_Solution_Data that will be copied.
     */
    eProsima_user_DllExport Inference_Solution_Data(
            Inference_Solution_Data&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Inference_Solution_Data that will be copied.
     */
    eProsima_user_DllExport Inference_Solution_Data& operator =(
            const Inference_Solution_Data& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Inference_Solution_Data that will be copied.
     */
    eProsima_user_DllExport Inference_Solution_Data& operator =(
            Inference_Solution_Data&& x);

    /*!
     * @brief Comparison operator.
     * @param x Inference_Solution_Data object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Inference_Solution_Data& x) const;

    /*!
     * @brief Comparison operator.
     * @param x Inference_Solution_Data object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Inference_Solution_Data& x) const;

    /*!
     * @brief This function copies the value in member solution
     * @param _solution New value to be copied in member solution
     */
    eProsima_user_DllExport void solution(
            const std::vector<uint8_t>& _solution);

    /*!
     * @brief This function moves the value in member solution
     * @param _solution New value to be moved in member solution
     */
    eProsima_user_DllExport void solution(
            std::vector<uint8_t>&& _solution);

    /*!
     * @brief This function returns a constant reference to member solution
     * @return Constant reference to member solution
     */
    eProsima_user_DllExport const std::vector<uint8_t>& solution() const;

    /*!
     * @brief This function returns a reference to member solution
     * @return Reference to member solution
     */
    eProsima_user_DllExport std::vector<uint8_t>& solution();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const Inference_Solution_Data& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    std::vector<uint8_t> m_solution;
};
/*!
 * @brief This class represents the structure Inference_Task defined by the user in the IDL file.
 * @ingroup INFERENCE
 */
class Inference_Task : public Multiservice_Task 
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Inference_Task();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport virtual ~Inference_Task();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Inference_Task that will be copied.
     */
    eProsima_user_DllExport Inference_Task(
            const Inference_Task& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Inference_Task that will be copied.
     */
    eProsima_user_DllExport Inference_Task(
            Inference_Task&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Inference_Task that will be copied.
     */
    eProsima_user_DllExport Inference_Task& operator =(
            const Inference_Task& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Inference_Task that will be copied.
     */
    eProsima_user_DllExport Inference_Task& operator =(
            Inference_Task&& x);

    /*!
     * @brief Comparison operator.
     * @param x Inference_Task object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Inference_Task& x) const;

    /*!
     * @brief Comparison operator.
     * @param x Inference_Task object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Inference_Task& x) const;

    /*!
     * @brief This function copies the value in member data
     * @param _data New value to be copied in member data
     */
    eProsima_user_DllExport void data(
            const Inference_Task_Data& _data);

    /*!
     * @brief This function moves the value in member data
     * @param _data New value to be moved in member data
     */
    eProsima_user_DllExport void data(
            Inference_Task_Data&& _data);

    /*!
     * @brief This function returns a constant reference to member data
     * @return Constant reference to member data
     */
    eProsima_user_DllExport const Inference_Task_Data& data() const;

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    eProsima_user_DllExport Inference_Task_Data& data();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const Inference_Task& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    Inference_Task_Data m_data;
};
/*!
 * @brief This class represents the structure Inference_Solution defined by the user in the IDL file.
 * @ingroup INFERENCE
 */
class Inference_Solution : public Multiservice_Solution 
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Inference_Solution();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport virtual ~Inference_Solution();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Inference_Solution that will be copied.
     */
    eProsima_user_DllExport Inference_Solution(
            const Inference_Solution& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Inference_Solution that will be copied.
     */
    eProsima_user_DllExport Inference_Solution(
            Inference_Solution&& x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Inference_Solution that will be copied.
     */
    eProsima_user_DllExport Inference_Solution& operator =(
            const Inference_Solution& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Inference_Solution that will be copied.
     */
    eProsima_user_DllExport Inference_Solution& operator =(
            Inference_Solution&& x);

    /*!
     * @brief Comparison operator.
     * @param x Inference_Solution object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Inference_Solution& x) const;

    /*!
     * @brief Comparison operator.
     * @param x Inference_Solution object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Inference_Solution& x) const;

    /*!
     * @brief This function copies the value in member data
     * @param _data New value to be copied in member data
     */
    eProsima_user_DllExport void data(
            const Inference_Solution_Data& _data);

    /*!
     * @brief This function moves the value in member data
     * @param _data New value to be moved in member data
     */
    eProsima_user_DllExport void data(
            Inference_Solution_Data&& _data);

    /*!
     * @brief This function returns a constant reference to member data
     * @return Constant reference to member data
     */
    eProsima_user_DllExport const Inference_Solution_Data& data() const;

    /*!
     * @brief This function returns a reference to member data
     * @return Reference to member data
     */
    eProsima_user_DllExport Inference_Solution_Data& data();

    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const Inference_Solution& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    Inference_Solution_Data m_data;
};

#endif // _FAST_DDS_GENERATED_INFERENCE_H_